# Display Image & text on I2C driven ssd1306 OLED display
import time
from machine import Pin, I2C
from ssd1306 import SSD1306_I2C
import rv3028_rtc
import framebuf

button = machine.Pin(15, machine.Pin.IN, machine.Pin.PULL_UP)
rst = 7

WIDTH = 128 # oled display width
HEIGHT = 64 # oled display height

i2c = I2C(0) # Init I2C using I2C0 defaults,SCL=Pin(GP9), SDA=Pin(GP8), freq=400000
#print("I2C Address : "+hex(i2c.scan()[0]).upper()) # Display device address
#print("I2C Configuration: "+str(i2c)) # Display I2C config

oled = SSD1306_I2C(WIDTH, HEIGHT, i2c, 0x3D, reset = 7)
rtc = rv3028_rtc.RV3028(0x52, i2c, "LSM")

b_one = bytearray(b'\x00\x00\x00\x00\xff\xc0\x00\xff\xc0\x01\xff\xc0\x01\xff\xc0\x03\xff\xc0\x07\xff\xc0\x00\x0f\xc0\x00\x0f\xc0\x00\x0f\xc0\x00\x0f\xc0\x00\x0f\xc0\x00\x0f\xc0\x00\x0f\xc0\x00\x0f\xc0\x00\x0f\xc0\x00\x0f\xc0\x00\x0f\xc0\x00\x0f\xc0\x00\x0f\xc0\x00\x0f\xc0\x00\x0f\xc0\x00\x0f\xc0\x00\x0f\xc0\x00\x0f\xc0\x00\x0f\xc0\x00\x0f\xc0\x00\x0f\xc0\x00\x0f\xc0\x00\x0f\xc0\x00\x0f\xc0\x00\x0f\xc0\x00\x0f\xc0\x00\x0f\xc0\x00\x0f\xc0\x00\x00\x00')
one = framebuf.FrameBuffer(b_one, 24,36, framebuf.MONO_HLSB)

b_two = bytearray(b'\x00\x7f\x00\x01\xff\xc0\x07\xff\xe0\x0f\xff\xf0\x1f\xff\xf8\x1f\xff\xfc?\xc3\xfc?\x80\xfe\x7f\x00\xfc\x7f\x00\xfe~\x00~~\x00\xfe\x00\x00\xfc\x00\x00\xfc\x00\x00\xfc\x00\x01\xfc\x00\x03\xf8\x00\x03\xf0\x00\x07\xf0\x00\x0f\xe0\x00\x1f\xe0\x00?\xc0\x00\x7f\x80\x00\xff\x00\x01\xfe\x00\x03\xfc\x00\x07\xf8\x00\x0f\xf8\x00\x1f\xe0\x00?\xff\xfe\x7f\xff\xfe\xff\xff\xfe\xff\xff\xfe\xff\xff\xfe\xff\xff\xfe\x00\x00\x00')
two = framebuf.FrameBuffer(b_two, 24,36, framebuf.MONO_HLSB)

b_three = bytearray(b'\x00~\x00\x01\xff\xc0\x07\xff\xe0\x0f\xff\xf0\x0f\xff\xf8\x1f\xff\xf8\x1f\xc3\xfc?\x80\xfc?\x00\xfc\x00\x00\xfc\x00\x01\xfc\x00\x03\xf8\x00\x0f\xf8\x00\x7f\xf0\x00\x7f\xe0\x00\x7f\x80\x00\x7f\xe0\x00\x7f\xf8\x00\x7f\xf8\x00\x07\xfc\x00\x01\xfe\x00\x00\xfe\x00\x00~\x00\x00\x7f\x00\x00>\xfe\x00\x7f~\x00~\x7f\x00~\x7f\x00\xfe\x7f\xc3\xfc?\xff\xfc\x1f\xff\xf8\x1f\xff\xf0\x07\xff\xe0\x03\xff\xc0\x00\xfe\x00')
three = framebuf.FrameBuffer(b_three, 24,36, framebuf.MONO_HLSB)

b_four = bytearray(b'\x00\x03\xf8\x00\x07\xf8\x00\x07\xf8\x00\x0f\xf8\x00\x1f\xf8\x00\x1f\xf8\x00?\xf8\x00\x7f\xf8\x00\x7f\xf8\x00\xff\xf8\x01\xff\xf8\x01\xfd\xf8\x03\xfb\xf8\x03\xf1\xf8\x07\xf3\xf8\x0f\xe1\xf8\x0f\xc3\xf8\x1f\xc1\xf8?\x83\xf8?\x03\xf8\x7f\x01\xf8\xfe\x03\xf8\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x03\xf8\x00\x01\xf8\x00\x03\xf8\x00\x01\xf8\x00\x03\xf8\x00\x01\xf8\x00\x03\xf8\x00\x00\x00')
four = framebuf.FrameBuffer(b_four, 24,36, framebuf.MONO_HLSB)

b_five = bytearray(b'\x00\x00\x00\x00\xff\xfe\x01\xff\xfe\x01\xff\xfe\x01\xff\xfe\x01\xff\xfe\x03\xff\xfe\x01\xf0\x00\x03\xf0\x00\x03\xf0\x00\x03\xf0\x00\x07\xe0\x00\x07\xe0\x00\x07\xff\x00\x07\xff\xe0\x07\xff\xf0\x0f\xff\xf8\x0f\xff\xfc\x0f\xff\xfc\x0f\xc1\xfe\x03\x80\xfe\x00\x00~\x00\x00~\x00\x00~\x00\x00>\x00\x00~\x00\x00~\x7f\x00~\x7f\x80\xfe?\xc3\xfe\x1f\xff\xfc\x1f\xff\xf8\x0f\xff\xf0\x07\xff\xe0\x03\xff\xc0\x00~\x00')
five = framebuf.FrameBuffer(b_five, 24,36, framebuf.MONO_HLSB)

b_six = bytearray(b'\x00\x08\x00\x00\x0f\x00\x00\x1f\x80\x00\x1f\xc0\x00?\x80\x00?\x00\x00\x7f\x00\x00~\x00\x00\xfe\x00\x00\xfc\x00\x01\xfc\x00\x01\xfc\x00\x03\xf8\x00\x03\xf0\x00\x07\xfe\x00\x0f\xff\xc0\x0f\xff\xe0\x0f\xff\xf0\x1f\xff\xf0\x1f\xff\xf8?\xc3\xfc?\x81\xfc?\x00\xfc\x7f\x00\xfc~\x00\xfc?\x00\xfc~\x00\xfc?\x01\xfc?\x81\xfc?\xc7\xf8\x1f\xff\xf8\x1f\xff\xf0\x0f\xff\xe0\x07\xff\xc0\x01\xff\x80\x00~\x00')
six = framebuf.FrameBuffer(b_six, 24,36, framebuf.MONO_HLSB)

b_seven = bytearray(b'\x00\x00\x00?\xff\xff?\xff\xff?\xff\xfe?\xff\xff?\xff\xfe?\xff\xfe\x00\x01\xfc\x00\x01\xfc\x00\x03\xf8\x00\x03\xf8\x00\x03\xf0\x00\x07\xf0\x00\x07\xe0\x00\x0f\xe0\x00\x1f\xc0\x00\x1f\xc0\x00\x1f\x80\x00?\x80\x00?\x00\x00\x7f\x00\x00~\x00\x00\xfe\x00\x00\xfc\x00\x01\xfc\x00\x01\xfc\x00\x03\xf8\x00\x03\xf8\x00\x07\xf0\x00\x07\xf0\x00\x0f\xe0\x00\x0f\xe0\x00\x1f\xc0\x00\x1f\xc0\x00\x1f\x80\x00\x00\x00\x00')
seven = framebuf.FrameBuffer(b_seven, 24,36, framebuf.MONO_HLSB)

b_eight = bytearray(b'\x00~\x00\x03\xff\xc0\x07\xff\xe0\x0f\xff\xf0\x1f\xff\xf8\x1f\xff\xf8?\xc3\xf8?\x81\xfc?\x00\xfc?\x00\xfc?\x00\xfc?\x81\xfc\x1f\x81\xfc\x1f\xc3\xf8\x1f\xff\xf0\x0f\xff\xf0\x07\xff\xe0\x0f\xff\xf0\x1f\xff\xf8?\xff\xfc?\x81\xfe\x7f\x00\xfe~\x00~~\x00~\xfe\x00\x7f|\x00>\xfe\x00\x7f~\x00~\x7f\x00\xfe\x7f\xc3\xfe?\xff\xfc?\xff\xfc\x1f\xff\xf8\x0f\xff\xf0\x07\xff\xe0\x00\xff\x00')
eight = framebuf.FrameBuffer(b_eight, 24,36, framebuf.MONO_HLSB)

b_nine = bytearray(b'\x00~\x00\x01\xff\xc0\x03\xff\xe0\x0f\xff\xf0\x0f\xff\xf8\x1f\xff\xf8\x1f\xc3\xfc?\x81\xfc?\x80\xfe?\x00\xfc?\x00~?\x00\xfe?\x00|?\x80\xfe?\x81\xfc\x1f\xc3\xfc\x1f\xff\xf8\x0f\xff\xf8\x0f\xff\xf0\x03\xff\xf0\x01\xff\xe0\x00\x7f\xe0\x00\x0f\xc0\x00\x1f\xc0\x00?\x80\x00?\x80\x00?\x00\x00\x7f\x00\x00\xfe\x00\x00\xfe\x00\x01\xfc\x00\x01\xfc\x00\x03\xf8\x00\x03\xf8\x00\x03\xf0\x00\x00\x00\x00')
nine = framebuf.FrameBuffer(b_nine, 24,36, framebuf.MONO_HLSB)

b_zero = bytearray(b'\x00~\x00\x03\xff\xc0\x07\xff\xe0\x0f\xff\xf0\x1f\xff\xf8\x1f\xff\xf8?\xc3\xfc?\x81\xfc?\x00\xfc~\x00\xfe~\x00~~\x00~~\x00~~\x00~~\x00~~\x00~|\x00>~\x00~~\x00~|\x00>~\x00~~\x00~~\x00~~\x00~~\x00~~\x00\xfe\x7f\x00\xfe?\x00\xfc?\x81\xfc?\xc3\xfc\x1f\xff\xf8\x1f\xff\xf8\x0f\xff\xf0\x07\xff\xe0\x01\xff\xc0\x00~\x00')
zero = framebuf.FrameBuffer(b_zero, 24,36, framebuf.MONO_HLSB)

b_bell = bytearray(b'\x0c\x00\x1e\x00?\x00?\x00\x7f\x80\x7f\x80\xff\xc0\xff\xc0\xff\xc0\x0c\x00')
bell = framebuf.FrameBuffer(b_bell, 10,10, framebuf.MONO_HLSB)

listy = (zero,one,two,three,four,five,six,seven,eight,nine)

def displayTime():
    
    hours = str(rtc.get_hours())
    if len(hours) == 1:
        digit1 = 0
        digit2 = int(hours)
    else:
        digit1 = int(hours[0])
        digit2 = int(hours[1])
        
    minutes = str(rtc.get_minutes())
    if len(minutes) == 1:
        digit3 = 0
        digit4 = int(minutes)
    else:
        digit3 = int(minutes[0])
        digit4 = int(minutes[1])
        
    oled.fill(0)
    oled.blit(listy[digit1], 2, 14)
    oled.blit(listy[digit2], 33, 14)

    oled.fill_rect(62, 20, 4, 4, 1)
    oled.fill_rect(62, 39, 4, 4, 1)

    oled.blit(listy[digit3], 70, 14)
    oled.blit(listy[digit4], 100, 14)

    oled.blit(bell,118,0)
    
    weekday = rtc.get_weekday("long")
    date = str(rtc.get_date("ordinal"))
    month = rtc.get_month("long")
    oled.text(weekday, 0, 0)
    oled.text(date + " " + month, 0, 52)
    
    oled.show()
    time.sleep(5)
    oled.fill(0)
    oled.show()

while True:
    if button.value() == 0:
        displayTime()
        time.sleep(0.5)